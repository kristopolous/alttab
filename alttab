#!/usr/bin/perl -w

# Uses parts of
# keylog2 - a rootless keylogger that only requires an X server and the xinput
# --Kirsle
# http://sh.kirsle.net/

use strict;
use warnings;
use IO::Pty::Easy;
use IO::Handle;
use File::Temp  qw/ tempfile tempdir /;
use POSIX qw(mkfifo);

# X11 display.
$ENV{DISPLAY} ||= ":0.0";

# Get the input list.
my @inputs = `xinput list`;

# Find the AT keyboard.
my $id;
foreach my $line (@inputs) {
  $line =~ s/^[\s\t]+//g;
  $line =~ s/[\s\t]+$//g;
  $line =~ s/[\x0D\x0A]+//g;
  next unless length $line;
  if ($line =~ /keyboard/i && $line =~ /. AT/) {
    ($id) = ($line =~ /id=(\d+)/)[0];
  }
}

# Track state of modifier keys.
our %mod = (
  'shift' => 0,
  'ctrl'  => 0,
  'alt'   => 0,
  'super' => 0,
);

# Begin watching. Make a pseudo TTY for this so xinput believes we're a shell.
my $tty = IO::Pty::Easy->new();
#print "Watching `xinput test $id`\n";
$tty->spawn("xinput test $id");

my $string = "";
my %byId = ();
my %isMapped = ();
my @clientList;
my @matchingWindows = ();
my $matchingPtr = 0;
my $windowRaw = `xwininfo -root -tree | grep ^"        0" | grep -v "has no name" | sed -E 's/\\s+//'`;
my $startWindow = sprintf("0x%x", `xdotool getwindowfocus`);
my @windowList = split(/\n/, $windowRaw);
my $winstate = "";

foreach(@windowList) {
  my ($id, $str) = $_ =~ /(0x[0-9a-f]*)(.*)/;
  $winstate = `xwininfo -id $id -stats | grep "Map State" | awk -F : ' { print \$2 } ' `;
  $winstate =~ s/^\s+//;
  $winstate =~ s/\s+$//;

  $isMapped{$id} = { 'IsViewable' => 1, 'IsUnMapped' => 0 }->{$winstate};
  $byId{$id} = $str;
}

`[ -e /tmp/alttab ] && unlink /tmp/alttab`;
`mkfifo /tmp/alttab`;

system("cat /tmp/alttab | osd_cat -l 1 -f '-*-*-bold-r-*-*-96-*-*-*-*-*-*-*' -c '#000055' -S '#000000' -s 8 -O 2 -u '#aaaaff'&");
open(my $screen, ">>", "/tmp/alttab");

sub matchReset {
  @matchingWindows = ();
  $matchingPtr = 0;
}

sub doExit {
  if(scalar (@matchingWindows) > 0) {
    $startWindow = $matchingWindows[$matchingPtr];
  }
  system("pkill osd_cat");
  system("xdotool windowraise $startWindow");
  system("xdotool windowfocus --sync $startWindow");

  close($screen);
  exit(0);
}

sub onScreen {
  $string = $_[0];
  print $screen "${string}_\n";
  flush $screen;
  `xsetroot -solid blue && sleep 0.01 && xsetroot -solid black`;
}

sub nextWindow {
  if(scalar(@matchingWindows) > 0) {
    $matchingPtr ++;
    $matchingPtr %= scalar (@matchingWindows);
    my $winid = $matchingWindows[$matchingPtr];
    `xdotool windowraise $winid`;
    `xdotool windowfocus --sync root`;
    onScreen $string;
  }
}

sub findWindow {
  my $window = "";
  my $search = "";
  my $hide = 0;
  my $kill = 0;
  my $query = $_[0];
  my $realquery = $_[0];
  matchReset;

  # If there's an empty query, then make it the regex that
  # will match everything.
  if (length($query) == 0) {
    $query = '.';
  }

  if (substr($query, -1) eq '!') {
    $query = substr($query, 0, -1);
    $hide = 1;
  }

  if (substr($query, -2) eq '-9') {
    $query = substr($query, 0, -2);
    $kill = 1;
  }
    
  if (substr($query, -1) eq '&') {
    system($query);
    doExit;
  }

  # Otherwise, and this is tricky, 1 character queries should
  # be ignored so as not to match too many things.
  if (length($realquery) != 1) {
    while( ($window, $search) = each(%byId) ) {
      if ( $search =~ /$query/i ) {
        if ($kill == 1) {
          `xkill -id $window`;
        } else {
          if(length($realquery) > 1) {
            push @matchingWindows, $window;
            `xdotool windowmap $window`;
          } elsif ($isMapped{$window} == 1) {
            # If there is no query then we are cycling through
            # only mapped windows.
            push @matchingWindows, $window;
          }
        }
      } elsif ($hide == 1 || $isMapped{$window} == 0) {
        `xdotool windowminimize $window`;
      }
    }
  }
  if (scalar(@matchingWindows) > 0) {
    for(my $i = 0; $i < scalar(@matchingWindows); $i++) {
      if($matchingWindows[$i] =~ $startWindow) {
        $matchingPtr = $i;
      }
    }
    my $winid = $matchingWindows[$matchingPtr];
    `xdotool windowraise $winid`;
    $startWindow = $winid;
  }
  `xdotool windowfocus --sync root`;

  onScreen $_[0];
}

`xdotool windowfocus --sync root`;
onScreen "";
findWindow "";
nextWindow;

while ($tty->is_active) {
  my $data = $tty->read();
  my @lines = split(/\n/, $data);
  foreach my $line (@lines) {
    # Key event?
    chomp $line;
    if ($line =~ /^key\s+(press|release)\s+(\d+)\s*?$/i) {
      event($1, $2);
    }
  }
}

# Handle key events
sub event {
  my ($event,$sym) = @_;

  # Only QWERTY keyboards supported.
  my $key = kbd_qwerty($event,$sym);

  print "[$sym] $event: " . ($key eq " " ? "{space}" : $key) . "\n";

  if ($event eq "press") {
    # The empty string matches all windows so that you can
    # just do alt+tab tab tab etc...
    # 
    # The second condition is needed to make sure that we
    # don't clear out the list for every alt+tab keydown
    if ($string eq '' 
      and scalar(@matchingWindows) == 0) {
      findWindow ''
    }
    if (length($key) == 1) {
      findWindow $string . $key;
    } elsif ($key eq 'bs') {
      findWindow substr $string, 0, -1;
    } elsif (
      ($key eq 'tb' || $key eq 'shtb')
      and scalar(@matchingWindows) > 0
    ) {
      if ($key eq 'tb') {
        nextWindow;
      } else {
        $matchingPtr = $matchingPtr + scalar(@matchingWindows) - 1;
        $matchingPtr %= scalar (@matchingWindows);
        my $winid = $matchingWindows[$matchingPtr];
        `xdotool windowraise $winid`;
        `xdotool windowfocus --sync root`;
        onScreen $string;
      }
    } elsif ($key =~ 'ret' or $key =~ 'es') {
      doExit;
    }
  }
}

# QWERTY keysym finder
sub kbd_qwerty {
  my ($event,$sym) = @_;

  # Modifier keys.
  my %modkeys = (
    50  => 'sh', # L Shift
    62  => 'sh', # R Shift
    37  => 'ctrl',  # L Ctrl
    105 => 'ctrl',  # R Ctrl
    64  => 'alt',   # L Alt
    108 => 'alt',   # R Alt
    133 => 'super', # L Super
  );

  if (exists $modkeys{$sym}) {
    my $name = $modkeys{$sym};
    $mod{$name} = $event eq "press" ? 1 : 0;
    return "$name";
  }

  # Qwerty keys.
  my %keys = (
    # qwerty row
    24 => [ 'q', 'Q' ], # normal, shift key
    25 => [ 'w', 'W' ],
    26 => [ 'e', 'E' ],
    27 => [ 'r', 'R' ],
    28 => [ 't', 'T' ],
    29 => [ 'y', 'Y' ],
    30 => [ 'u', 'U' ],
    31 => [ 'i', 'I' ],
    32 => [ 'o', 'O' ],
    33 => [ 'p', 'P' ],
    34 => [ '[', '{' ],
    35 => [ ']', '}' ],
    51 => [ "\\", '|' ],

    # asdf row
    38 => [ 'a', 'A' ],
    39 => [ 's', 'S' ],
    40 => [ 'd', 'D' ],
    41 => [ 'f', 'F' ],
    42 => [ 'g', 'G' ],
    43 => [ 'h', 'H' ],
    44 => [ 'j', 'J' ],
    45 => [ 'k', 'K' ],
    46 => [ 'l', 'L' ],
    47 => [ ';', ':' ],
    48 => [ '"', "'" ],
    36 => "ret",

    # zxcv row
    52 => [ 'z', 'Z' ],
    53 => [ 'x', 'X' ],
    54 => [ 'c', 'C' ],
    55 => [ 'v', 'V' ],
    56 => [ 'b', 'B' ],
    57 => [ 'n', 'N' ],
    58 => [ 'm', 'M' ],
    59 => [ ',', '<' ],
    60 => [ '.', '>' ],
    61 => [ '/', '?' ],

    # number row
    49 => [ '`', '~' ],
    10 => [ '1', '!' ],
    11 => [ '2', '@' ],
    12 => [ '3', '#' ],
    13 => [ '4', '$' ],
    14 => [ '5', '%' ],
    15 => [ '6', '^' ],
    16 => [ '7', '&' ],
    17 => [ '8', '*' ],
    18 => [ '9', '(' ],
    19 => [ '0', ')' ],
    20 => [ '-', '_' ],
    21 => [ '+', '=' ],

    # space bar
    65 => ' ',

    # number pad
    90 => '0',
    87 => '1',
    88 => '2',
    89 => '3',
    83 => '4',
    84 => '5',
    85 => '6',
    79 => '7',
    80 => '8',
    81 => '9',
    106 => '/',
    63  => '*',
    82  => '-',
    86  => '+',

    # F keys
    67 => 'f1',
    68 => 'f2',
    69 => 'f3',
    70 => 'f4',
    71 => 'f5',
    72 => 'f6',
    73 => 'f7',
    74 => 'f8',
    75 => 'f9',
    76 => 'f10',
    95 => 'f11',
    96 => 'f12',

    # Misc
    9  => 'es',
    22 => 'bs',
    77 => '{Num Lock}',
    107 => '{Print Scr}',
    118 => '{Insert}',
    119 => '{Delete}',
    110 => '{Home}',
    112 => '{Pg Up}',
    117 => '{Pg Dn}',
    115 => '{End}',
    111 => '{Up}',
    116 => '{Down}',
    113 => '{Left}',
    114 => '{Right}',
    135 => '{Menu}',
    23  => ['tb', 'shtb'],
    66  => '{Caps Lock}',
  );

  if (exists $keys{$sym}) {
    if (ref($keys{$sym})) {
      if ($mod{sh}) {
        return $keys{$sym}->[1];
      }
      else {
        return $keys{$sym}->[0];
      }
    }
    return $keys{$sym};
  }
  else {
    return "{Unknown: $sym}";
  }
}
